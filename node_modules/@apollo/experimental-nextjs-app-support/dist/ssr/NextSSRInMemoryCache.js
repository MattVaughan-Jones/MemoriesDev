"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NextSSRInMemoryCache = void 0;
const client_1 = require("@apollo/client");
const ApolloRehydrateSymbols_1 = require("./ApolloRehydrateSymbols");
const lateInitializingQueue_1 = require("./lateInitializingQueue");
class NextSSRInMemoryCache extends client_1.InMemoryCache {
    constructor(config) {
        super(config);
        this.rehydrationContext = {
            incomingResults: [],
            uninitialized: true,
        };
        this.registerWindowHook();
    }
    registerWindowHook() {
        if (typeof window !== "undefined") {
            if (Array.isArray(window[ApolloRehydrateSymbols_1.ApolloResultCache] || [])) {
                (0, lateInitializingQueue_1.registerLateInitializingQueue)(ApolloRehydrateSymbols_1.ApolloResultCache, (data) => this.write(data));
            }
            else {
                throw new Error("On the client side, only one instance of `NextSSRInMemoryCache` can be created!");
            }
        }
    }
    write(options) {
        if (typeof window == "undefined") {
            this.rehydrationContext.incomingResults.push(options);
        }
        return super.write(options);
    }
    setRehydrationContext(rehydrationContext) {
        if (this.rehydrationContext.uninitialized) {
            rehydrationContext.incomingResults.push(...this.rehydrationContext.incomingResults);
        }
        this.rehydrationContext = rehydrationContext;
        this.rehydrationContext.uninitialized = false;
    }
}
exports.NextSSRInMemoryCache = NextSSRInMemoryCache;
//# sourceMappingURL=NextSSRInMemoryCache.js.map