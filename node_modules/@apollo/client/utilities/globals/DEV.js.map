{"version":3,"file":"DEV.js","sourceRoot":"","sources":["../../../src/utilities/globals/DEV.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,eAAe,CACb,SAAS,IAAI,MAAM;IAKjB,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC;IASzB,CAAC,CAAC,KAAK,CAAC,cAAM,OAAA,OAAO,CAAC,GAAG,CAAC,QAAQ,EAApB,CAAoB,CAAC,KAAK,YAAY,CACvD,CAAC","sourcesContent":["import global from \"./global\";\nimport { maybe } from \"./maybe\";\n\nexport default (\n  \"__DEV__\" in global\n    // We want it to be possible to set __DEV__ globally to control the result\n    // of this code, so it's important to check global.__DEV__ instead of\n    // assuming a naked reference like __DEV__ refers to global scope, since\n    // those references could be replaced with true or false by minifiers.\n    ? Boolean(global.__DEV__)\n\n    // In a buildless browser environment, maybe(() => process.env.NODE_ENV)\n    // evaluates to undefined, so __DEV__ becomes true by default, but can be\n    // initialized to false instead by a script/module that runs earlier.\n    //\n    // If you use tooling to replace process.env.NODE_ENV with a string like\n    // \"development\", this code will become something like maybe(() =>\n    // \"development\") !== \"production\", which also works as expected.\n    : maybe(() => process.env.NODE_ENV) !== \"production\"\n);\n"]}