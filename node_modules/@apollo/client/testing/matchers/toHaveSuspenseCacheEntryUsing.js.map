{"version":3,"file":"toHaveSuspenseCacheEntryUsing.js","sourceRoot":"","sources":["../../../src/testing/matchers/toHaveSuspenseCacheEntryUsing.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,kBAAkB,EAAE,MAAM,aAAa,CAAC;AAEjD,MAAM,CAAC,IAAM,6BAA6B,GAStC,UACF,aAAa,EACb,MAAM,EACN,KAAK,EACL,EAAkD;;QAAlD,qBAA+B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAA,EAAhD,SAAS,eAAA,EAAE,gBAAa,EAAb,QAAQ,mBAAG,EAAE,KAAA;IAE1B,IAAI,CAAC,CAAC,aAAa,YAAY,aAAa,CAAC,EAAE;QAC7C,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;KAClE;IAED,IAAM,QAAQ,GACZ,CAAC,MAAM,EAAE,KAAK,EAAE,kBAAkB,CAAC,SAAS,CAAC,CAC9C,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACnB,IAAM,QAAQ,GAAG,MAAA,aAAa,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,0CAAE,OAAO,CAAC;IAE3E,OAAO;QACL,IAAI,EAAE,CAAC,CAAC,QAAQ;QAChB,OAAO,EAAE;YACP,OAAO,kCACL,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,kCACO,CAAC;QAClC,CAAC;KACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { MatcherFunction } from 'expect';\nimport type { DocumentNode } from 'graphql';\nimport type { ApolloClient, OperationVariables } from '../../core';\nimport { SuspenseCache } from '../../react';\nimport { canonicalStringify } from '../../cache';\n\nexport const toHaveSuspenseCacheEntryUsing: MatcherFunction<\n  [\n    client: ApolloClient<unknown>,\n    query: DocumentNode,\n    options: {\n      variables?: OperationVariables;\n      queryKey?: string | number | any[];\n    }\n  ]\n> = function (\n  suspenseCache,\n  client,\n  query,\n  { variables, queryKey = [] } = Object.create(null)\n) {\n  if (!(suspenseCache instanceof SuspenseCache)) {\n    throw new Error('Actual must be an instance of `SuspenseCache`');\n  }\n\n  const cacheKey = (\n    [client, query, canonicalStringify(variables)] as any[]\n  ).concat(queryKey);\n  const queryRef = suspenseCache['queryRefs'].lookupArray(cacheKey)?.current;\n\n  return {\n    pass: !!queryRef,\n    message: () => {\n      return `Expected suspense cache ${\n        queryRef ? 'not ' : ''\n      }to have cache entry using key`;\n    },\n  };\n};\n"]}