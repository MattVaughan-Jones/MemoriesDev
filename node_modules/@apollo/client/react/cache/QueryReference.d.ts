import type { ApolloQueryResult, ObservableQuery, OperationVariables } from '../../core';
import type { CacheKey } from './types';
type Listener<TData> = (promise: Promise<ApolloQueryResult<TData>>) => void;
type FetchMoreOptions<TData> = Parameters<ObservableQuery<TData>['fetchMore']>[0];
interface QueryReferenceOptions {
    key: CacheKey;
    onDispose?: () => void;
    autoDisposeTimeoutMs?: number;
}
export declare class QueryReference<TData = unknown> {
    result: ApolloQueryResult<TData>;
    readonly key: CacheKey;
    readonly observable: ObservableQuery<TData>;
    promiseCache?: Map<any[], Promise<ApolloQueryResult<TData>>>;
    promise: Promise<ApolloQueryResult<TData>>;
    private subscription;
    private listeners;
    private autoDisposeTimeoutId;
    private initialized;
    private refetching;
    private resolve;
    private reject;
    constructor(observable: ObservableQuery<TData>, options: QueryReferenceOptions);
    listen(listener: Listener<TData>): () => void;
    refetch(variables: OperationVariables | undefined): Promise<ApolloQueryResult<TData>>;
    fetchMore(options: FetchMoreOptions<TData>): Promise<ApolloQueryResult<TData>>;
    dispose(): void;
    private onDispose;
    private handleNext;
    private handleError;
    private deliver;
}
export {};
//# sourceMappingURL=QueryReference.d.ts.map