import type { DocumentNode, OperationVariables, TypedDocumentNode } from '../../core';
import type { QueryReference } from '../cache/QueryReference';
import type { SuspenseQueryHookOptions, NoInfer } from '../types/types';
import type { FetchMoreFunction, RefetchFunction } from './useSuspenseQuery';
import type { DeepPartial } from '../../utilities';
export type UseBackgroundQueryResult<TData = unknown, TVariables extends OperationVariables = OperationVariables> = [
    QueryReference<TData>,
    {
        fetchMore: FetchMoreFunction<TData, TVariables>;
        refetch: RefetchFunction<TData, TVariables>;
    }
];
export declare function useBackgroundQuery<TData, TVariables extends OperationVariables, TOptions extends Omit<SuspenseQueryHookOptions<TData>, 'variables' | 'returnPartialData' | 'refetchWritePolicy'>>(query: DocumentNode | TypedDocumentNode<TData, TVariables>, options?: Omit<SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>, 'returnPartialData' | 'refetchWritePolicy'> & TOptions): UseBackgroundQueryResult<TOptions['errorPolicy'] extends 'ignore' | 'all' ? TData | undefined : TData, TVariables>;
export declare function useBackgroundQuery<TData = unknown, TVariables extends OperationVariables = OperationVariables>(query: DocumentNode | TypedDocumentNode<TData, TVariables>, options: Omit<SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>, 'returnPartialData' | 'refetchWritePolicy'> & {
    returnPartialData: true;
    errorPolicy: 'ignore' | 'all';
}): UseBackgroundQueryResult<DeepPartial<TData> | undefined, TVariables>;
export declare function useBackgroundQuery<TData = unknown, TVariables extends OperationVariables = OperationVariables>(query: DocumentNode | TypedDocumentNode<TData, TVariables>, options: Omit<SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>, 'returnPartialData' | 'refetchWritePolicy'> & {
    errorPolicy: 'ignore' | 'all';
}): UseBackgroundQueryResult<TData | undefined, TVariables>;
export declare function useBackgroundQuery<TData = unknown, TVariables extends OperationVariables = OperationVariables>(query: DocumentNode | TypedDocumentNode<TData, TVariables>, options?: Omit<SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>, 'returnPartialData' | 'refetchWritePolicy'>): UseBackgroundQueryResult<TData, TVariables>;
export declare function useReadQuery<TData>(queryRef: QueryReference<TData>): {
    data: TData;
    networkStatus: import("../../core").NetworkStatus;
    error: import("../../errors").ApolloError | undefined;
};
//# sourceMappingURL=useBackgroundQuery.d.ts.map