{"version":3,"file":"useBackgroundQuery.js","sourceRoot":"","sources":["../../../src/react/hooks/useBackgroundQuery.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AAMlE,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAGpD,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AACnC,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,EACL,aAAa,EACb,mBAAmB,EACnB,oBAAoB,GACrB,MAAM,oBAAoB,CAAC;AAE5B,OAAO,EAAE,kBAAkB,EAAE,MAAM,aAAa,CAAC;AAEjD,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AA+FpD,MAAM,UAAU,kBAAkB,CAIhC,KAA0D,EAC1D,OAGuB;IAHvB,wBAAA,EAAA,UAGI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;IAEvB,IAAM,aAAa,GAAG,gBAAgB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAC9D,IAAM,MAAM,GAAG,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC/C,IAAM,iBAAiB,GAAG,oBAAoB,CAAC,EAAE,KAAK,OAAA,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;IAC3D,IAAA,SAAS,GAAK,iBAAiB,UAAtB,CAAuB;IAChC,IAAA,KAAkB,OAAO,SAAZ,EAAb,QAAQ,mBAAG,EAAE,KAAA,CAAa;IAElC,IAAM,QAAQ,GACZ,CAAC,MAAM,EAAE,KAAK,EAAE,kBAAkB,CAAC,SAAS,CAAC,CAC9C,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAEnB,IAAM,QAAQ,GAAG,aAAa,CAAC,WAAW,CAAC,QAAQ,EAAE;QACnD,OAAA,MAAM,CAAC,UAAU,CAAC,iBAAiB,CAAC;IAApC,CAAoC,CACrC,CAAC;IAEI,IAAA,KAAkC,QAAQ,CAC9C,cAAM,OAAA,IAAI,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAA3C,CAA2C,CAClD,EAFM,YAAY,QAAA,EAAE,eAAe,QAEnC,CAAC;IAEF,mBAAmB,CAAC,QAAQ,CAAC,CAAC;IAE9B,IAAM,SAAS,GAAyC,WAAW,CACjE,UAAC,OAAO;QACN,IAAM,OAAO,GAAG,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAE5C,eAAe,CAAC,UAAC,YAAY;YAC3B,OAAA,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC;QAAhD,CAAgD,CACjD,CAAC;QAEF,OAAO,OAAO,CAAC;IACjB,CAAC,EACD,CAAC,QAAQ,CAAC,CACX,CAAC;IAEF,IAAM,OAAO,GAAuC,WAAW,CAC7D,UAAC,SAAS;QACR,IAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAE5C,eAAe,CAAC,UAAC,YAAY;YAC3B,OAAA,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC;QAAhD,CAAgD,CACjD,CAAC;QAEF,OAAO,OAAO,CAAC;IACjB,CAAC,EACD,CAAC,QAAQ,CAAC,CACX,CAAC;IAEF,QAAQ,CAAC,YAAY,GAAG,YAAY,CAAC;IAErC,OAAO,OAAO,CAAC;QACb,OAAO;YACL,QAAQ;YACR;gBACE,SAAS,WAAA;gBACT,OAAO,SAAA;aACR;SACF,CAAC;IACJ,CAAC,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;AACrC,CAAC;AAED,MAAM,UAAU,YAAY,CAAQ,QAA+B;IAC3D,IAAA,KAAkB,QAAQ,CAAC,CAAC,CAAC,EAA1B,WAAW,QAAe,CAAC;IAEpC,SAAS,CACP,QAAQ,CAAC,YAAY,EACrB,2EAA2E;QACzE,sEAAsE;QACtE,kFAAkF,CACrF,CAAC;IAEF,IAAI,OAAO,GAAG,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAEtD,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;QAC3B,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;KAClD;IAED,SAAS,CAAC;QACR,OAAO,QAAQ,CAAC,MAAM,CAAC,UAAC,OAAO;YAC7B,QAAQ,CAAC,YAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAClD,WAAW,CAAC,UAAC,SAAS,IAAK,OAAA,SAAS,GAAG,CAAC,EAAb,CAAa,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEf,IAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;IAE9B,OAAO,OAAO,CAAC;QACb,OAAO;YACL,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,aAAa,EAAE,MAAM,CAAC,aAAa;YACnC,KAAK,EAAE,aAAa,CAAC,MAAM,CAAC;SAC7B,CAAC;IACJ,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;AACf,CAAC","sourcesContent":["import { useEffect, useState, useMemo, useCallback } from 'react';\nimport type {\n  DocumentNode,\n  OperationVariables,\n  TypedDocumentNode,\n} from '../../core';\nimport { useApolloClient } from './useApolloClient';\nimport type { QueryReference } from '../cache/QueryReference';\nimport type { SuspenseQueryHookOptions, NoInfer } from '../types/types';\nimport { __use } from './internal';\nimport { useSuspenseCache } from './useSuspenseCache';\nimport {\n  toApolloError,\n  useTrackedQueryRefs,\n  useWatchQueryOptions,\n} from './useSuspenseQuery';\nimport type { FetchMoreFunction, RefetchFunction } from './useSuspenseQuery';\nimport { canonicalStringify } from '../../cache';\nimport type { DeepPartial } from '../../utilities';\nimport { invariant } from '../../utilities/globals';\n\nexport type UseBackgroundQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables\n> = [\n  QueryReference<TData>,\n  {\n    fetchMore: FetchMoreFunction<TData, TVariables>;\n    refetch: RefetchFunction<TData, TVariables>;\n  }\n];\n\nexport function useBackgroundQuery<\n  TData,\n  TVariables extends OperationVariables,\n  TOptions extends Omit<\n    SuspenseQueryHookOptions<TData>,\n    'variables' | 'returnPartialData' | 'refetchWritePolicy'\n  >\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: Omit<\n    SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>,\n    'returnPartialData' | 'refetchWritePolicy'\n  > &\n    TOptions\n): UseBackgroundQueryResult<\n  TOptions['errorPolicy'] extends 'ignore' | 'all'\n    ? // TODO: support `returnPartialData` | `refetchWritePolicy`\n      // see https://github.com/apollographql/apollo-client/issues/10893\n      // TOptions['returnPartialData'] extends true\n      // ? DeepPartial<TData> | undefined\n      // : TData | undefined\n      TData | undefined\n    : // : TOptions['returnPartialData'] extends true\n      // ? DeepPartial<TData>\n      TData,\n  TVariables\n>;\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: Omit<\n    SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>,\n    'returnPartialData' | 'refetchWritePolicy'\n  > & {\n    returnPartialData: true;\n    errorPolicy: 'ignore' | 'all';\n  }\n): UseBackgroundQueryResult<DeepPartial<TData> | undefined, TVariables>;\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: Omit<\n    SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>,\n    'returnPartialData' | 'refetchWritePolicy'\n  > & {\n    errorPolicy: 'ignore' | 'all';\n  }\n): UseBackgroundQueryResult<TData | undefined, TVariables>;\n\n// TODO: support `returnPartialData` | `refetchWritePolicy`\n// see https://github.com/apollographql/apollo-client/issues/10893\n\n// export function useBackgroundQuery<\n//   TData = unknown,\n//   TVariables extends OperationVariables = OperationVariables\n// >(\n//   query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n//   options: Omit<\n//     SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>,\n//     'returnPartialData' | 'refetchWritePolicy'\n//   > & {\n//     returnPartialData: true;\n//   }\n// ): UseBackgroundQueryResult<DeepPartial<TData>, TVariables>;\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: Omit<\n    SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>,\n    'returnPartialData' | 'refetchWritePolicy'\n  >\n): UseBackgroundQueryResult<TData, TVariables>;\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: Omit<\n    SuspenseQueryHookOptions<TData, TVariables>,\n    'returnPartialData' | 'refetchWritePolicy'\n  > = Object.create(null)\n): UseBackgroundQueryResult<TData> {\n  const suspenseCache = useSuspenseCache(options.suspenseCache);\n  const client = useApolloClient(options.client);\n  const watchQueryOptions = useWatchQueryOptions({ query, options });\n  const { variables } = watchQueryOptions;\n  const { queryKey = [] } = options;\n\n  const cacheKey = (\n    [client, query, canonicalStringify(variables)] as any[]\n  ).concat(queryKey);\n\n  const queryRef = suspenseCache.getQueryRef(cacheKey, () =>\n    client.watchQuery(watchQueryOptions)\n  );\n\n  const [promiseCache, setPromiseCache] = useState(\n    () => new Map([[queryRef.key, queryRef.promise]])\n  );\n\n  useTrackedQueryRefs(queryRef);\n\n  const fetchMore: FetchMoreFunction<TData, TVariables> = useCallback(\n    (options) => {\n      const promise = queryRef.fetchMore(options);\n\n      setPromiseCache((promiseCache) =>\n        new Map(promiseCache).set(queryRef.key, promise)\n      );\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  const refetch: RefetchFunction<TData, TVariables> = useCallback(\n    (variables) => {\n      const promise = queryRef.refetch(variables);\n\n      setPromiseCache((promiseCache) =>\n        new Map(promiseCache).set(queryRef.key, promise)\n      );\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  queryRef.promiseCache = promiseCache;\n\n  return useMemo(() => {\n    return [\n      queryRef,\n      {\n        fetchMore,\n        refetch,\n      },\n    ];\n  }, [queryRef, fetchMore, refetch]);\n}\n\nexport function useReadQuery<TData>(queryRef: QueryReference<TData>) {\n  const [, forceUpdate] = useState(0);\n\n  invariant(\n    queryRef.promiseCache,\n    'It appears that `useReadQuery` was used outside of `useBackgroundQuery`. ' +\n      '`useReadQuery` is only supported for use with `useBackgroundQuery`. ' +\n      'Please ensure you are passing the `queryRef` returned from `useBackgroundQuery`.'\n  );\n\n  let promise = queryRef.promiseCache.get(queryRef.key);\n\n  if (!promise) {\n    promise = queryRef.promise;\n    queryRef.promiseCache.set(queryRef.key, promise);\n  }\n\n  useEffect(() => {\n    return queryRef.listen((promise) => {\n      queryRef.promiseCache!.set(queryRef.key, promise);\n      forceUpdate((prevState) => prevState + 1);\n    });\n  }, [queryRef]);\n\n  const result = __use(promise);\n\n  return useMemo(() => {\n    return {\n      data: result.data,\n      networkStatus: result.networkStatus,\n      error: toApolloError(result),\n    };\n  }, [result]);\n}\n"]}