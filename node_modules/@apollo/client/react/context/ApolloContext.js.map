{"version":3,"file":"ApolloContext.js","sourceRoot":"","sources":["../../../src/react/context/ApolloContext.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAG/C,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AAuB5D,IAAM,UAAU,GAAkB,YAAY;IAC5C,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC;IAClC,CAAC,CAAE,oBAA4B,CAAC;AAElC,MAAM,UAAU,gBAAgB;IAC9B,SAAS,CACP,eAAe,IAAI,KAAK,EACxB,+FAA+F;QAC7F,uGAAuG;QACvG,iEAAiE;QAEjE,sGAAsG,CACzG,CAAC;IAEF,IAAI,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CACzC,MAAM,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CACzC,CAAC;IAEF,OAAO,cAAc,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CACtC,cAAc,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,MAAM,CAC3C,KAAK,CAAC,aAAa,CAAqB,EAAE,CAAC,EAC3C,EAAE,WAAW,EAAE,eAAe,EAAE,CACjC,CACF,CAAC;AACJ,CAAC;AAOD,MAAM,CAAC,IAAM,kBAAkB,GAAG,gBAAgB,CAAC","sourcesContent":["import * as React from 'react';\nimport type { ApolloClient } from '../../core';\nimport { canUseSymbol } from '../../utilities';\nimport type { SuspenseCache } from '../cache';\nimport type { RenderPromises } from '../ssr';\nimport { global, invariant } from '../../utilities/globals';\n\nexport interface ApolloContextValue {\n  client?: ApolloClient<object>;\n  renderPromises?: RenderPromises;\n  suspenseCache?: SuspenseCache;\n}\n\ntype ReactVersion = string;\ndeclare global {\n  interface Window {\n    [contextKey]: Record<ReactVersion, React.Context<ApolloContextValue>>;\n  }\n}\n\n// To make sure that Apollo Client does not create more than one React context\n// per React version, we store that Context in a global Map, keyed by the\n// React version. This way, if there are multiple versions of React loaded,\n// (e.g. in a Microfrontend environment), each React version will get its own\n// Apollo context.\n// If there are multiple versions of Apollo Client though, which can happen by\n// accident, this can avoid bugs where those multiple Apollo Client versions\n// would be unable to \"see each other\", even if an ApolloProvider was present.\nconst contextKey: unique symbol = canUseSymbol\n  ? Symbol.for('__APOLLO_CONTEXT__')\n  : ('__APOLLO_CONTEXT__' as any);\n\nexport function getApolloContext(): React.Context<ApolloContextValue> {\n  invariant(\n    'createContext' in React,\n    'Invoking `getApolloContext` in an environment where `React.createContext` is not available.\\n' +\n      'The Apollo Client functionality you are trying to use is only available in React Client Components.\\n' +\n      'Please make sure to add \"use client\" at the top of your file.\\n' +\n      // TODO: change to React documentation once React documentation contains information about Client Components\n      'For more information, see https://nextjs.org/docs/getting-started/react-essentials#client-components'\n  );\n\n  let contextStorage = global[contextKey] || (\n    global[contextKey] = Object.create(null)\n  );\n\n  return contextStorage[React.version] || (\n    contextStorage[React.version] = Object.assign(\n      React.createContext<ApolloContextValue>({}),\n      { displayName: 'ApolloContext' },\n    )\n  );\n}\n\n/**\n * @deprecated This function has no \"resetting\" effect since Apollo Client 3.4.12,\n * and will be removed in the next major version of Apollo Client.\n * If you want to get the Apollo Context, use `getApolloContext` instead.\n */\nexport const resetApolloContext = getApolloContext;\n"]}