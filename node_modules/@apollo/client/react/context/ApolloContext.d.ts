import * as React from 'react';
import type { ApolloClient } from '../../core';
import type { SuspenseCache } from '../cache';
import type { RenderPromises } from '../ssr';
export interface ApolloContextValue {
    client?: ApolloClient<object>;
    renderPromises?: RenderPromises;
    suspenseCache?: SuspenseCache;
}
type ReactVersion = string;
declare global {
    interface Window {
        [contextKey]: Record<ReactVersion, React.Context<ApolloContextValue>>;
    }
}
declare const contextKey: unique symbol;
export declare function getApolloContext(): React.Context<ApolloContextValue>;
export declare const resetApolloContext: typeof getApolloContext;
export {};
//# sourceMappingURL=ApolloContext.d.ts.map