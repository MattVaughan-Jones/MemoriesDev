"use strict";
/*
 * Invoked as part of the "build" script of this package,
 * this script takes all specification fragments in the
 * `spec-source` folder and generates a unified specification
 * document at `spec/specification.json`.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs-extra");
const md5 = require("md5");
const massage_spec_1 = require("./massage-spec");
;
const patch_set_1 = require("./patch-set");
const validate_evolution_1 = require("./validate-evolution");
async function main() {
    const inputDir = path.join(process.cwd(), 'spec-source');
    const outDir = path.join(process.cwd(), 'spec');
    // If this is a PR build check the spec for evolution (this is set in buildspec-pr.yaml)
    const outputFile = path.join(outDir, 'specification.json');
    if (process.env.CODEBUILD_WEBHOOK_TRIGGER?.startsWith('pr/')) {
        await (0, validate_evolution_1.validateSpecificationEvolution)(async () => {
            await generateResourceSpecification(inputDir, outputFile);
            return fs.readJson(outputFile);
        });
    }
    else {
        await generateResourceSpecification(inputDir, outputFile);
    }
    await (0, patch_set_1.applyAndWrite)(path.join(outDir, 'cfn-lint.json'), path.join(inputDir, 'cfn-lint'));
    await (0, patch_set_1.applyAndWrite)(path.join(outDir, 'cfn-docs.json'), path.join(inputDir, 'cfn-docs'));
}
/**
 * Generate CloudFormation resource specification from sources and patches
 */
async function generateResourceSpecification(inputDir, outFile) {
    const spec = { PropertyTypes: {}, ResourceTypes: {}, Fingerprint: '' };
    Object.assign(spec, await (0, patch_set_1.applyPatchSet)(path.join(inputDir, 'specification')));
    (0, massage_spec_1.massageSpec)(spec);
    spec.Fingerprint = md5(JSON.stringify((0, massage_spec_1.normalize)(spec)));
    await (0, patch_set_1.writeSorted)(outFile, spec);
}
main()
    .catch(e => {
    // eslint-disable-next-line no-console
    console.error(e.stack);
    process.exit(-1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJidWlsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7O0dBS0c7O0FBRUgsNkJBQTZCO0FBQzdCLCtCQUErQjtBQUMvQiwyQkFBMkI7QUFDM0IsaURBQXdEO0FBQUEsQ0FBQztBQUN6RCwyQ0FBd0U7QUFDeEUsNkRBQXNFO0FBR3RFLEtBQUssVUFBVSxJQUFJO0lBQ2pCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3pELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRWhELHdGQUF3RjtJQUN4RixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0lBQzNELElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDNUQsTUFBTSxJQUFBLG1EQUE4QixFQUFDLEtBQUssSUFBSSxFQUFFO1lBQzlDLE1BQU0sNkJBQTZCLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzFELE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztLQUNKO1NBQU07UUFDTCxNQUFNLDZCQUE2QixDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztLQUMzRDtJQUVELE1BQU0sSUFBQSx5QkFBYSxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDekYsTUFBTSxJQUFBLHlCQUFhLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUMzRixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxLQUFLLFVBQVUsNkJBQTZCLENBQUMsUUFBZ0IsRUFBRSxPQUFlO0lBQzVFLE1BQU0sSUFBSSxHQUF5QixFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFFN0YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxJQUFBLHlCQUFhLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9FLElBQUEsMEJBQVcsRUFBQyxJQUFJLENBQUMsQ0FBQztJQUNsQixJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUEsd0JBQVMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFeEQsTUFBTSxJQUFBLHVCQUFXLEVBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFFRCxJQUFJLEVBQUU7S0FDSCxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7SUFDVCxzQ0FBc0M7SUFDdEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25CLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEludm9rZWQgYXMgcGFydCBvZiB0aGUgXCJidWlsZFwiIHNjcmlwdCBvZiB0aGlzIHBhY2thZ2UsXG4gKiB0aGlzIHNjcmlwdCB0YWtlcyBhbGwgc3BlY2lmaWNhdGlvbiBmcmFnbWVudHMgaW4gdGhlXG4gKiBgc3BlYy1zb3VyY2VgIGZvbGRlciBhbmQgZ2VuZXJhdGVzIGEgdW5pZmllZCBzcGVjaWZpY2F0aW9uXG4gKiBkb2N1bWVudCBhdCBgc3BlYy9zcGVjaWZpY2F0aW9uLmpzb25gLlxuICovXG5cbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgKiBhcyBtZDUgZnJvbSAnbWQ1JztcbmltcG9ydCB7IG1hc3NhZ2VTcGVjLCBub3JtYWxpemUgfSBmcm9tICcuL21hc3NhZ2Utc3BlYyc7O1xuaW1wb3J0IHsgd3JpdGVTb3J0ZWQsIGFwcGx5UGF0Y2hTZXQsIGFwcGx5QW5kV3JpdGUgfSBmcm9tICcuL3BhdGNoLXNldCc7XG5pbXBvcnQgeyB2YWxpZGF0ZVNwZWNpZmljYXRpb25Fdm9sdXRpb24gfSBmcm9tICcuL3ZhbGlkYXRlLWV2b2x1dGlvbic7XG5pbXBvcnQgeyBzY2hlbWEgfSBmcm9tICcuLi9saWInO1xuXG5hc3luYyBmdW5jdGlvbiBtYWluKCkge1xuICBjb25zdCBpbnB1dERpciA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnc3BlYy1zb3VyY2UnKTtcbiAgY29uc3Qgb3V0RGlyID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdzcGVjJyk7XG5cbiAgLy8gSWYgdGhpcyBpcyBhIFBSIGJ1aWxkIGNoZWNrIHRoZSBzcGVjIGZvciBldm9sdXRpb24gKHRoaXMgaXMgc2V0IGluIGJ1aWxkc3BlYy1wci55YW1sKVxuICBjb25zdCBvdXRwdXRGaWxlID0gcGF0aC5qb2luKG91dERpciwgJ3NwZWNpZmljYXRpb24uanNvbicpO1xuICBpZiAocHJvY2Vzcy5lbnYuQ09ERUJVSUxEX1dFQkhPT0tfVFJJR0dFUj8uc3RhcnRzV2l0aCgncHIvJykpIHtcbiAgICBhd2FpdCB2YWxpZGF0ZVNwZWNpZmljYXRpb25Fdm9sdXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZ2VuZXJhdGVSZXNvdXJjZVNwZWNpZmljYXRpb24oaW5wdXREaXIsIG91dHB1dEZpbGUpO1xuICAgICAgcmV0dXJuIGZzLnJlYWRKc29uKG91dHB1dEZpbGUpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IGdlbmVyYXRlUmVzb3VyY2VTcGVjaWZpY2F0aW9uKGlucHV0RGlyLCBvdXRwdXRGaWxlKTtcbiAgfVxuXG4gIGF3YWl0IGFwcGx5QW5kV3JpdGUocGF0aC5qb2luKG91dERpciwgJ2Nmbi1saW50Lmpzb24nKSwgcGF0aC5qb2luKGlucHV0RGlyLCAnY2ZuLWxpbnQnKSk7XG4gIGF3YWl0IGFwcGx5QW5kV3JpdGUocGF0aC5qb2luKG91dERpciwgJ2Nmbi1kb2NzLmpzb24nKSwgcGF0aC5qb2luKGlucHV0RGlyLCAnY2ZuLWRvY3MnKSk7XG59XG5cbi8qKlxuICogR2VuZXJhdGUgQ2xvdWRGb3JtYXRpb24gcmVzb3VyY2Ugc3BlY2lmaWNhdGlvbiBmcm9tIHNvdXJjZXMgYW5kIHBhdGNoZXNcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVSZXNvdXJjZVNwZWNpZmljYXRpb24oaW5wdXREaXI6IHN0cmluZywgb3V0RmlsZTogc3RyaW5nKSB7XG4gIGNvbnN0IHNwZWM6IHNjaGVtYS5TcGVjaWZpY2F0aW9uID0geyBQcm9wZXJ0eVR5cGVzOiB7fSwgUmVzb3VyY2VUeXBlczoge30sIEZpbmdlcnByaW50OiAnJyB9O1xuXG4gIE9iamVjdC5hc3NpZ24oc3BlYywgYXdhaXQgYXBwbHlQYXRjaFNldChwYXRoLmpvaW4oaW5wdXREaXIsICdzcGVjaWZpY2F0aW9uJykpKTtcbiAgbWFzc2FnZVNwZWMoc3BlYyk7XG4gIHNwZWMuRmluZ2VycHJpbnQgPSBtZDUoSlNPTi5zdHJpbmdpZnkobm9ybWFsaXplKHNwZWMpKSk7XG5cbiAgYXdhaXQgd3JpdGVTb3J0ZWQob3V0RmlsZSwgc3BlYyk7XG59XG5cbm1haW4oKVxuICAuY2F0Y2goZSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHByb2Nlc3MuZXhpdCgtMSk7XG4gIH0pO1xuIl19